📂 MyAutoChat
├── 📝 .gitignore
├── 📝 InContent.txt
├── 🐍 app.py
├── 🐍 config.py
├── 📂 instance/
│   └── 💾 login.db
├── 📂 static/
│   ├── 📂 css/
│   │   ├── 🎨 auth.css
│   │   ├── 🎨 base.css
│   │   └── 🎨 chat.css
│   ├── 📂 img/
│   │   ├── 📄 theme.png
│   │   └── 📄 themedark.png
│   └── 📂 js/
│       ├── 📜 auth.js
│       ├── 📜 chat.js
│       └── 📜 theme.js
└── 📂 templates/
    ├── 🌐 base.html
    ├── 🌐 index.html
    ├── 🌐 login.html
    └── 🌐 register.html

=== Datei-Inhalte ===

📝 --- .gitignore ---
/venv
/_InTree
/instance/*.db
__pycache__/*.py[cod]
📝 --- InContent.txt ---

🐍 --- app.py ---
import os
from flask import Flask, render_template, redirect, url_for, flash, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from flask_login import LoginManager, login_user, logout_user, login_required, current_user, UserMixin


app = Flask(__name__)
app.config.from_object("config.Config")

# Sicherstellen, dass der instance-Ordner existiert
os.makedirs(os.path.join(app.root_path, "instance"), exist_ok=True)

db     = SQLAlchemy(app)
bcrypt = Bcrypt(app)
login_manager = LoginManager(app)
login_manager.login_view = "login"        # Umleitung für @login_required

# ---------- Model ---------- #
class User(db.Model, UserMixin):
    id       = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), unique=True, nullable=False)
    email    = db.Column(db.String(120), unique=True, nullable=False)
    pw_hash  = db.Column(db.String(128), nullable=False)

    def check_password(self, password):
        return bcrypt.check_password_hash(self.pw_hash, password)

# ---------- Loader ---------- #
@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# ---------- Routen ---------- #
@app.route("/")
@login_required
def index():
    return render_template("index.html", user=current_user)

@app.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "POST":
        uname  = request.form["username"].strip()
        mail   = request.form["email"].strip().lower()
        passwd   = request.form["password"]
        passwd2  = request.form["password_confirm"]

        # Passwort‑Wiederholung prüfen
        if passwd != passwd2:
            flash("Die Passwörter stimmen nicht überein.", "danger")
            return redirect(url_for("register"))

        if User.query.filter((User.username == uname) | (User.email == mail)).first():
            flash("Benutzername oder E‑Mail schon vergeben", "danger")
            return redirect(url_for("register"))

        user = User(
            username = uname,
            email    = mail,
            pw_hash  = bcrypt.generate_password_hash(passwd).decode("utf-8")
        )
        db.session.add(user)
        db.session.commit()
        flash("Account erstellt! Du kannst dich jetzt anmelden.", "success")
        return redirect(url_for("login"))
    return render_template("register.html")

@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        uname  = request.form["username"]
        passwd = request.form["password"]
        user = User.query.filter_by(username=uname).first()

        if user and user.check_password(passwd):
            login_user(user)
            return redirect(url_for("index"))
        flash("Falsche Anmeldedaten", "danger")
    return render_template("login.html")

@app.route("/logout")
@login_required
def logout():
    logout_user()
    return redirect(url_for("login"))

@app.route("/delete_account", methods=["POST"])
def delete_account():
    data            = request.get_json() or {}
    uname           = data.get("username", "").strip()
    pw              = data.get("password", "")
    pw_confirm      = data.get("password_confirm", "")

    # Passwort‑Wiederholung prüfen
    if pw != pw_confirm:
        return "Passwörter stimmen nicht überein", 400

    user = User.query.filter_by(username=uname).first()
    if not user or not user.check_password(pw):
        return "Benutzername oder Passwort falsch", 400

    db.session.delete(user)
    db.session.commit()
    return jsonify({"status": "deleted"}), 200

# ---------- Initialer DB‑Setup ---------- #
if __name__ == "__main__":
    with app.app_context():
        # Damit wird jetzt instance/login.db angelegt (statt chat.db im Projekt-Root)
        db.create_all()
    app.run(debug=True)

🐍 --- config.py ---
import os
basedir = os.path.abspath(os.path.dirname(__file__))

class Config:
    SECRET_KEY = os.environ.get("SECRET_KEY", "dev-key-change-me")
    SQLALCHEMY_DATABASE_URI = (
        os.environ.get("DATABASE_URL") or
        # Datenbank im instance‑Ordner, um sie vom Repo auszuschließen:
        f"sqlite:///{os.path.join(basedir, 'instance', 'login.db')}"
    )
    SQLALCHEMY_TRACK_MODIFICATIONS = False

🎨 --- static\css\auth.css ---
/* ---------- Auth (Login / Register) ---------- */
.auth-wrapper {
    display:flex;
    align-items:center;
    justify-content:center;
    height:100vh;                 /* volle Höhe, vertikal zentriert */
    background:#fff;              /* gleiche Grundfarbe wie Chat‑Seite */
  }

  .auth-card {
    width:100%;
    max-width:420px;              /* angenehm breit, aber nicht zu groß */
    border:1px solid var(--border);
    border-radius:var(--radius);
    padding:2rem;
    box-shadow:0 2px 12px rgba(0,0,0,.05);  /* sanfter Schatten */
    display:flex;
    flex-direction:column;
    gap:1rem;
  }

  /* Inputs und Button an Chat‑Stil anlehnen */
  .auth-card input {
    padding:.6rem .8rem;
    border:1px solid var(--border);
    border-radius:var(--radius);
    width:100%;
  }

  .auth-card button {
    padding:.6rem;
    border:none;
    border-radius:var(--radius);
    background:#0078ff;
    color:#fff;
    cursor:pointer;
  }

  .auth-alt {
    text-align:center;
    font-size:.9rem;
  }

  /* Abstand in der Form */
.auth-form {
  display:flex;
  flex-direction:column;
  gap:1rem;                      /* 1 rem Abstand zwischen den drei Elementen */
}

/* Flash‑Container in der Card */
.flash-box {
  display:flex;
  flex-direction:column;
  gap:.5rem;
  margin-bottom:1rem;            /* Abstand unter den Meldungen */
}

.flash {                         /* Grundstil */
  padding:.6rem .8rem;
  border:1px solid var(--border);
  border-radius:var(--radius);
  font-size:.9rem;
}

/* Kategorieabhängige Farben – gern anpassen */
.flash.danger  { background:#ffe5e5; color:#b30000; }
.flash.success { background:#e6ffe6; color:#006600; }

/* ---------- Modal‑Overlay ---------- */
.modal-overlay {
  position:fixed;
  inset:0;
  background:rgba(0,0,0,.35);
  /* standardmäßig VERSTECKT */
  display:none;
  align-items:center;
  justify-content:center;
  z-index:1000;
}
/* Wenn die Klasse .show gesetzt ist → anzeigen */
.modal-overlay.show {
  display:flex;
}
/* ---------- Modal‑Card (gleicher Stil wie .auth-card) ---------- */
.modal-card {
  background:#fff;
  border:1px solid var(--border);
  border-radius:var(--radius);
  box-shadow:0 2px 12px rgba(0,0,0,.1);
  width:100%;
  max-width:420px;
  padding:2rem;
  display:flex;
  flex-direction:column;
  gap:1rem;
}

/* Formular‑Layout im Modal */
.modal-card form {
  display:flex;
  flex-direction:column;
  gap:1rem;
}

.modal-actions {
  display:flex;
  justify-content:flex-end;
  gap:.5rem;
}

.modal-actions .danger {
  background:#ff5555;
  color:#fff;
}

.modal-actions button {
  padding:.5rem 1rem;
  border:none;
  border-radius:var(--radius);
  cursor:pointer;
}

🎨 --- static\css\base.css ---
:root {
    --bg-left:  #f1f1f1;
    --bg-right: #e6ffe6;
    --border:   #dddddd;
    --radius:   6px;
    --pad:      1rem;
    --width:    800px;
    font-family: system-ui, sans-serif;
  }

  /* Reset */
  *,*::before,*::after { box-sizing:border-box; margin:0; padding:0; }

  body { background:#fff; }

  .navbar {
    padding:var(--pad);
    border-bottom:1px solid var(--border);
    font-weight:600;
  }

  .navbar {
    display:flex;                 /* links/rechts nebeneinander */
    justify-content:space-between;
    align-items:center;
    padding:var(--pad);
    border-bottom:1px solid var(--border);
    font-weight:600;
  }

  .logout-btn {
    padding:.4rem 1rem;
    background:#ff5555;           /* roter Button */
    color:#fff;
    border-radius:var(--radius);
    text-decoration:none;
    font-size:.9rem;
  }

  .logout-btn:hover { background:#e04040; }

/* Theme‑Button & Navbar‑Actions */
.theme-btn {
  background:none;
  border:none;
  padding:0;
  cursor:pointer;
}
.theme-btn img { display:block; }
.navbar-actions { display:flex; align-items:center; gap:1rem; }

/* ---------- Dark‑Theme‑Varianten (Beispiel) ---------- */
.dark-theme {
  --bg-left:  #2b2b2b;
  --bg-right: #214021;
  --border:   #444;
  background: #1e1e1e;
  color:      #eee;
}

.dark-theme .navbar  { border-color:#444; }
.dark-theme .message { color:#eee; }
.dark-theme .logout-btn { background:#c33; }

🎨 --- static\css\chat.css ---
.chat-container {
    max-width:var(--width);
    margin:var(--pad) auto calc(3*var(--pad));
    display:flex;
    flex-direction:column;
    gap:var(--pad);
  }

  .message {
    position:relative;
    max-width:75%;
    padding:var(--pad);
    border:1px solid var(--border);
    border-radius:var(--radius);
  }

  .message.right { align-self:flex-end; background:var(--bg-right); }
  .message.left  { align-self:flex-start; background:var(--bg-left);  }

  .msg-date {
    position:absolute;
    right:.5rem;
    bottom:.25rem;
    font-size:.75rem;
    color:rgba(0,0,0,.5);
  }

  .fixed-form {
    position:fixed;
    bottom:0; left:0; right:0;
    padding:.5rem calc(50% - var(--width)/2);
    background:#fff;
    border-top:1px solid var(--border);
    display:flex;
    gap:.5rem;
  }

  .fixed-form input[type="text"]{
    flex:1;
    padding:.5rem;
    border:1px solid var(--border);
    border-radius:var(--radius);
  }

  .fixed-form button{
    padding:.5rem 1rem;
    border:none;
    background:#0078ff;
    color:#fff;
    border-radius:var(--radius);
    cursor:pointer;
  }

📜 --- static\js\auth.js ---
// static/js/auth.js
document.addEventListener("DOMContentLoaded", () => {
  const openBtn   = document.getElementById("openDeleteModal");
  const modal     = document.getElementById("deleteModal");
  const cancelBtn = document.getElementById("cancelDelete");
  const form      = document.getElementById("deleteForm");
  const pw2 = form.password_confirm.value;

  // Script läuft nur auf Login‑/Register‑Seiten
  if (!openBtn || !modal) return;

  /* ---------- Modal öffnen ---------- */
  openBtn.addEventListener("click", (e) => {
    e.preventDefault();
    modal.classList.add("show");      // Overlay einblenden
  });

  /* ---------- Modal schließen ---------- */
  cancelBtn.addEventListener("click", () => {
    modal.classList.remove("show");   // Overlay ausblenden
    form.reset();
  });

  /* ---------- Account löschen ---------- */
  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    const u1 = form.username.value.trim();
    const u2 = form.username_confirm.value.trim();
    const pw = form.password.value;
    const pw2 = form.password_confirm.value;

    if (u1 !== u2) {
      alert("Benutzernamen stimmen nicht überein!");
      return;
    }

    if (pw !== pw2) {
      alert("Passwörter stimmen nicht überein!");
           return;
    }

    try {
      const res = await fetch(deleteUrl, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          username:        u1,
          password:        pw,
          password_confirm: pw2
        })
      });

      if (res.ok) {
        window.location.href = redirectUrl;   // zurück zum Login
      } else {
        alert(await res.text() || "Fehler beim Löschen.");
      }
    } catch (err) {
      console.error(err);
      alert("Netzwerkfehler.");
    }
  });
});

📜 --- static\js\chat.js ---
document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("chatForm");
    const input = form.querySelector("input[name='message']");
    const chat  = document.getElementById("chat");

    form.addEventListener("submit", e => {
      e.preventDefault();
      const text = input.value.trim();
      if (!text) return;

      // rechte Bubble erzeugen
      const bubble = document.createElement("div");
      bubble.className = "message right";
      bubble.innerHTML = `
        <span>${text}</span>
        <span class="msg-date">${new Date().toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'})}</span>
      `;
      chat.appendChild(bubble);

      input.value = "";
      bubble.scrollIntoView({behavior:"smooth"});
    });
  });

📜 --- static\js\theme.js ---
// static/js/theme.js
document.addEventListener("DOMContentLoaded", () => {
    const btn  = document.getElementById("themeToggle");
    const root = document.documentElement;

    // gespeicherte Präferenz laden
    if (localStorage.getItem("theme") === "dark") {
      root.classList.add("dark-theme");
    }

    btn.addEventListener("click", () => {
      const dark = root.classList.toggle("dark-theme");
      localStorage.setItem("theme", dark ? "dark" : "light");
    });
  });

🌐 --- templates\base.html ---
<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="utf-8">
  <title>{% block title %}Chat{% endblock %}</title>

  <!-- Gemeinsame Styles -->
  <link rel="stylesheet" href="{{ url_for('static', filename='css/base.css') }}">
  <link rel="stylesheet" href="{{ url_for('static', filename='css/chat.css') }}">
  <link rel="stylesheet" href="{{ url_for('static', filename='css/auth.css') }}">
</head>

<body>
  {# ---------- globale Flash‑Meldungen ---------- #}
  {% with messages = get_flashed_messages(with_categories=True) %}
    {% if messages %}
      <ul class="flash-list">
        {% for cat, msg in messages %}
          <li class="flash {{ cat }}">{{ msg }}</li>
        {% endfor %}
      </ul>
    {% endif %}
  {% endwith %}

  {# ---------- Seiteninhalt ---------- #}
  {% block content %}{% endblock %}

  {# ---------- Auth‑Skript nur für /login & /register ---------- #}
  {% if request.endpoint in ['login', 'register'] %}
    <script>
      /* Flask‑URLs ans JS durchreichen */
      const deleteUrl   = "{{ url_for('delete_account') }}";
      const redirectUrl = "{{ url_for('login') }}";
    </script>
    <script src="{{ url_for('static', filename='js/auth.js') }}"></script>
  {% endif %}
</body>
</html>

🌐 --- templates\index.html ---
<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="utf-8">
  <title>Chat Messenger</title>

  <!-- Eigenes CSS -->
  <link rel="stylesheet" href="{{ url_for('static', filename='css/base.css') }}">
  <link rel="stylesheet" href="{{ url_for('static', filename='css/chat.css') }}">
</head>
<body>

  <!-- ---------- EINZIGE Navbar ---------- -->
  <nav class="navbar">
    <span class="navbar-brand">Chat Messenger</span>

    <div class="navbar-actions">
      <!-- Theme‑Toggle -->
      <button id="themeToggle" class="theme-btn" aria-label="Design umschalten">
        <img src="{{ url_for('static', filename='img/theme.png') }}"
             width="24" height="24" alt="Hell/Dunkel umschalten">
      </button>

      <!-- Logout -->
      <a href="{{ url_for('logout') }}" class="logout-btn">Abmelden</a>
    </div>
  </nav>

  <!-- ---------- Chat‑Inhalt ---------- -->
  <main class="chat-container" id="chat">
    <div class="message right">
      <span>hello, i am ...</span>
      <span class="msg-date">10:00</span>
    </div>

    <div class="message left">
      <span>Sprech Deutsch …</span>
      <span class="msg-date">10:01</span>
    </div>
  </main>

  <form class="fixed-form" id="chatForm" autocomplete="off">
    <input type="text" name="message" placeholder="Gib deine Nachricht ein …" required>
    <button type="submit">Senden</button>
  </form>

  <!-- ---------- Skripte ---------- -->
  <script src="{{ url_for('static', filename='js/chat.js') }}"></script>
  <script src="{{ url_for('static', filename='js/theme.js') }}"></script>
</body>
</html>

🌐 --- templates\login.html ---
{% extends "base.html" %}
{% block content %}
<div class="auth-wrapper">
  <div class="auth-card">

    {# ---------- Flash‑Meldungen INSIDE der Card ---------- #}
    {% with messages = get_flashed_messages(with_categories=True) %}
      {% if messages %}
        <div class="flash-box">
          {% for cat,msg in messages %}
            <div class="flash {{cat}}">{{ msg }}</div>
          {% endfor %}
        </div>
      {% endif %}
    {% endwith %}

    <h2>Anmelden</h2>

    <form method="post" class="auth-form">
      <input name="username"  placeholder="Benutzername" required>
      <input type="password" name="password" placeholder="Passwort" required>
      <button type="submit">Einloggen</button>
    </form>

    <p class="auth-alt">
      Noch kein Konto? <a href="{{ url_for('register') }}">Registrieren</a>
    </p>
    <p class="auth-alt">
      Altes Konto löschen?
      <a href="#" id="openDeleteModal">Konto löschen</a>
    </p>

    {# ---------- Lösch‑Modal (zunächst unsichtbar) ---------- #}
    <div class="modal-overlay" id="deleteModal" hidden>
      <div class="modal-card">
        <h3>Konto wirklich löschen?</h3>
        <p>Bitte Benutzernamen <strong>zweimal</strong> eintippen und Passwort bestätigen.</p>

        <form id="deleteForm">
          <input name="username"  placeholder="Benutzername" required>
          <input name="username_confirm" placeholder="Benutzername (wiederholen)" required>
          <input type="password" name="password" placeholder="Passwort" required>
          <input type="password" name="password_confirm" placeholder="Passwort wiederholen" required>
          <div class="modal-actions">
            <button type="button" id="cancelDelete">Abbrechen</button>
            <button type="submit"  class="danger">Löschen</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>
{% endblock %}


🌐 --- templates\register.html ---
{% extends "base.html" %}
{% block content %}
<div class="auth-wrapper">
  <div class="auth-card">

    {# ---------- Flash-Meldungen ---------- #}
    {% with messages = get_flashed_messages(with_categories=True) %}
      {% if messages %}
        <div class="flash-box">
          {% for cat, msg in messages %}
            <div class="flash {{ cat }}">{{ msg }}</div>
          {% endfor %}
        </div>
      {% endif %}
    {% endwith %}

    <h2>Registrieren</h2>

    <form method="post" class="auth-form">
      <input name="username" placeholder="Benutzername" required>
      <input type="email" name="email" placeholder="E‑Mail" required>
      <input type="password" name="password" placeholder="Passwort" required>
      <input type="password" name="password_confirm" placeholder="Passwort wiederholen" required>
      <button type="submit">Account anlegen</button>
    </form>

    <p class="auth-alt">
      Schon registriert?
      <a href="{{ url_for('login') }}">Jetzt anmelden</a>
    </p>
  </div>
</div>
{% endblock %}

