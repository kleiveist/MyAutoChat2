📂 MyAutoChat
├── 📝 .gitignore
├── 📝 InContent.txt
├── 📄 Projektübersicht.pdf
├── 📝 README.md
├── 🐍 app.py
├── 🐍 config.py
├── 📂 instance/
│   └── 💾 login.db
├── 📂 static/
│   ├── 📂 css/
│   │   ├── 🎨 auth.css
│   │   ├── 🎨 base.css
│   │   ├── 🎨 chat.css
│   │   └── 🎨 toolbar.css
│   ├── 📂 img/
│   │   ├── 📄 theme.png
│   │   ├── 📄 themedark.png
│   │   ├── 📄 tool01.png
│   │   ├── 📄 tool02.png
│   │   ├── 📄 tooldark01.png
│   │   └── 📄 tooldark02.png
│   └── 📂 js/
│       ├── 📜 auth.js
│       ├── 📜 chat.js
│       ├── 📜 theme.js
│       └── 📜 toolbar.js
└── 📂 templates/
    ├── 🌐 base.html
    ├── 🌐 index.html
    ├── 🌐 login.html
    └── 🌐 register.html

=== Datei-Inhalte ===

📝 --- .gitignore ---
/venv
/_InTree
/instance/*.db
__pycache__/*.py[cod]
📝 --- InContent.txt ---

📝 --- README.md ---
A lightweight Flask‑based chat application with user authentication,
built to serve as a foundation for an AI‑powered chat service.
You can register, log in, send messages in real time,
and—coming soon—plug in advanced AI chat engines and management tools.

---

## 🚀 Features

- **User Authentication**  
  Registration, login & logout powered by Flask‑Login and bcrypt.
- **Simple Chat UI**  
  Real‑time message bubbles, client‑side rendering via vanilla JS.
- **SQLite Backend**  
  Stores users (and later chat history) in a file‑based database.
- **Modular Structure**  
  Clearly separated config, models, views, static assets, and templates.
- **Future‑Proofing**  
  Designed to be extended with a pluggable AI chat engine and a management dashboard.

---

🐍 --- app.py ---
import os
from flask import Flask, render_template, redirect, url_for, flash, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from flask_login import LoginManager, login_user, logout_user, login_required, current_user, UserMixin


app = Flask(__name__)
app.config.from_object("config.Config")

# Sicherstellen, dass der instance-Ordner existiert
os.makedirs(os.path.join(app.root_path, "instance"), exist_ok=True)

db     = SQLAlchemy(app)
bcrypt = Bcrypt(app)
login_manager = LoginManager(app)
login_manager.login_view = "login"        # Umleitung für @login_required

# ---------- Model ---------- #
class User(db.Model, UserMixin):
    id       = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), unique=True, nullable=False)
    email    = db.Column(db.String(120), unique=True, nullable=False)
    pw_hash  = db.Column(db.String(128), nullable=False)

    def check_password(self, password):
        return bcrypt.check_password_hash(self.pw_hash, password)

# ---------- Loader ---------- #
@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# ---------- Routen ---------- #
@app.route("/")
@login_required
def index():
    return render_template("index.html", user=current_user)

@app.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "POST":
        uname  = request.form["username"].strip()
        mail   = request.form["email"].strip().lower()
        passwd   = request.form["password"]
        passwd2  = request.form["password_confirm"]

        # Passwort‑Wiederholung prüfen
        if passwd != passwd2:
            flash("Die Passwörter stimmen nicht überein.", "danger")
            return redirect(url_for("register"))

        if User.query.filter((User.username == uname) | (User.email == mail)).first():
            flash("Benutzername oder E‑Mail schon vergeben", "danger")
            return redirect(url_for("register"))

        user = User(
            username = uname,
            email    = mail,
            pw_hash  = bcrypt.generate_password_hash(passwd).decode("utf-8")
        )
        db.session.add(user)
        db.session.commit()
        flash("Account erstellt! Du kannst dich jetzt anmelden.", "success")
        return redirect(url_for("login"))
    return render_template("register.html")

@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        uname  = request.form["username"]
        passwd = request.form["password"]
        user = User.query.filter_by(username=uname).first()

        if user and user.check_password(passwd):
            login_user(user)
            return redirect(url_for("index"))
        flash("Falsche Anmeldedaten", "danger")
    return render_template("login.html")

@app.route("/logout")
@login_required
def logout():
    logout_user()
    return redirect(url_for("login"))

@app.route("/delete_account", methods=["POST"])
def delete_account():
    data            = request.get_json() or {}
    uname           = data.get("username", "").strip()
    pw              = data.get("password", "")
    pw_confirm      = data.get("password_confirm", "")

    # Passwort‑Wiederholung prüfen
    if pw != pw_confirm:
        return "Passwörter stimmen nicht überein", 400

    user = User.query.filter_by(username=uname).first()
    if not user or not user.check_password(pw):
        return "Benutzername oder Passwort falsch", 400

    db.session.delete(user)
    db.session.commit()
    return jsonify({"status": "deleted"}), 200

# ---------- Initialer DB‑Setup ---------- #
if __name__ == "__main__":
    with app.app_context():
        # Damit wird jetzt instance/login.db angelegt (statt chat.db im Projekt-Root)
        db.create_all()
    app.run(debug=True)

🐍 --- config.py ---
import os
basedir = os.path.abspath(os.path.dirname(__file__))

class Config:
    SECRET_KEY = os.environ.get("SECRET_KEY", "dev-key-change-me")
    SQLALCHEMY_DATABASE_URI = (
        os.environ.get("DATABASE_URL") or
        # Datenbank im instance‑Ordner, um sie vom Repo auszuschließen:
        f"sqlite:///{os.path.join(basedir, 'instance', 'login.db')}"
    )
    SQLALCHEMY_TRACK_MODIFICATIONS = False

🎨 --- static\css\auth.css ---
/* ---------- Auth (Login / Register) ---------- */
.auth-wrapper {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100vh;
  background: var(--bg-page);
  color: var(--text);
}

.auth-card {
  width: 100%;
  max-width: 420px;
  background: var(--bg-card);
  border: 1px solid var(--border);
  border-radius: var(--radius);
  padding: 2rem;
  box-shadow: 0 2px 12px rgba(0, 0, 0, .05);
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

/* Inputs & Buttons */
.auth-card input {
  width: 100%;
  padding: .6rem .8rem;
  border: 1px solid var(--border);
  border-radius: var(--radius);
  background: var(--bg-page);
  color: var(--text);
}
.auth-card button {
  padding: .6rem;
  border: none;
  border-radius: var(--radius);
  background: #0078ff;
  color: #fff;
  cursor: pointer;
}

/* Kleiner Text unterhalb der Form */
.auth-alt {
  text-align: center;
  font-size: .9rem;
}

/* Formular‑Abstände */
.auth-form {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

/* Flash‑Container & Meldungen */
.flash-box {
  display: flex;
  flex-direction: column;
  gap: .5rem;
  margin-bottom: 1rem;
}
.flash {
  padding: .6rem .8rem;
  border: 1px solid var(--border);
  border-radius: var(--radius);
  font-size: .9rem;
}
.flash.danger  { background: #ffe5e5; color: #b30000; }
.flash.success { background: #e6ffe6; color: #006600; }

.dark-theme .flash.danger  { background: #5a0000; color: #ffb3b3; }
.dark-theme .flash.success { background: #063906; color: #b6ffb6; }

/* ---------- Modal‑Overlay & -Card ---------- */
.modal-overlay {
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, .35);
  display: none;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}
.modal-overlay.show { display: flex; }

.modal-card {
  width: 100%;
  max-width: 420px;
  background: var(--bg-card);
  border: 1px solid var(--border);
  border-radius: var(--radius);
  box-shadow: 0 2px 12px rgba(0, 0, 0, .1);
  padding: 2rem;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

/* Formular im Modal */
.modal-card form {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.modal-actions {
  display: flex;
  justify-content: flex-end;
  gap: .5rem;
}
.modal-actions .danger {
  background: #ff5555;
  color: #fff;
}
.dark-theme .modal-actions .danger { background: #c33; }

.modal-actions button {
  padding: .5rem 1rem;
  border: none;
  border-radius: var(--radius);
  cursor: pointer;
}

🎨 --- static\css\base.css ---
/* static/css/base.css */

:root {
  /* --------- Light Theme (Default) --------- */
  --bg-page:  #ffffff;
  --bg-left:  #f1f1f1;
  --bg-right: #e6ffe6;
  --bg-card:  #ffffff;
  --border:   #dddddd;
  --text:     #000000;

  --radius: 6px;
  --pad:    1rem;
  --width:  800px;

  font-family: system-ui, sans-serif;
}

/* --------- Dark Theme Overrides --------- */
.dark-theme {
  --bg-page:  #1e1e1e;
  --bg-left:  #2b2b2b;
  --bg-right: #214021;
  --bg-card:  #262626;
  --border:   #444444;
  --text:     #eeeeee;
}

/* ---------- Reset ---------- */
*,*::before,*::after { box-sizing:border-box; margin:0; padding:0; }

/* ---------- Global ---------- */
body {
  background: var(--bg-page);
  color: var(--text);
}

/* ---------- Navbar ---------- */
.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: var(--pad);
  border-bottom: 1px solid var(--border);
  font-weight: 600;
  position: sticky;                  /* sticks to the viewport while scrolling */
  top: 0;                            /* sticks to the top */
  z-index: 101;                      /* higher than flash messages to stay on top */
  background: var(--bg-page);        /* ensure background is visible */
}

/* --- Nav actions container --- */
.navbar-actions {
  display: flex;
  align-items: center;
  gap: 1rem;
}

/* --- Theme toggle button --- */
.theme-btn {
  background: none;
  border: none;
  padding: 0;
  cursor: pointer;
}
.theme-btn img { display: block; }

/* --- Logout button --- */
.logout-btn {
  padding: .4rem 1rem;
  background: #ff5555;     /* accent colour stays bright */
  color: #fff;
  border-radius: var(--radius);
  text-decoration: none;
  font-size: .9rem;
}
.logout-btn:hover { background: #e04040; }

/* --- Dark‑theme specific tweaks --- */
.dark-theme .logout-btn { background: #c33; }

/* floating toggle für Auth‑Seiten */
.theme-floating {
  position: fixed;
  top: 1rem;
  right: 1rem;
  z-index: 1100;
}

/* Brand-Button styling */
.btn-brand {
  background: none;
  border: none;
  font: inherit;
  color: inherit;
  cursor: pointer;
  padding: 0;
}

/* Flash-Leiste: fixed position that follows scrolling */
ul.flash-list {
  list-style: none;
  margin: 0 auto;                     /* zentrieren */
  padding: 0;
  width: min(100%, var(--width));     /* flexibel bis max-width */
  position: sticky;                   /* sticks to the viewport while scrolling */
  top: 0;                             /* sticks to the top */
  z-index: 100;                       /* ensure it's above other content */
}

ul.flash-list li.flash {
  box-sizing: border-box;             /* Padding in Breite einrechnen */
  padding: .75rem 1rem;               /* Innenabstand */
  text-align: center;                 /* Text zentrieren */
  border: 1px solid var(--border);
  background: var(--bg-card);         /* Same background as other cards */
  color: var(--text);                 /* Match text color */
}

/* Danger and success flash messages */
ul.flash-list li.flash.danger {
  background: #ffe5e5;
  color: #b30000;
}
ul.flash-list li.flash.success {
  background: #e6ffe6;
  color: #006600;
}

.dark-theme ul.flash-list li.flash.danger {
  background: #5a0000;
  color: #ffb3b3;
}
.dark-theme ul.flash-list li.flash.success {
  background: #063906;
  color: #b6ffb6;
}

🎨 --- static\css\chat.css ---
/* static/css/chat.css */

/* ---------- Chat ---------- */
.chat-container {
  max-width: var(--width);
  margin: var(--pad) auto calc(4 * var(--pad));
  display: flex;
  flex-direction: column;
  gap: var(--pad);
  padding-bottom: 3rem; /* Extra space for the fixed-form */
}

.message {
  position: relative;
  max-width: 75%;
  padding: var(--pad);
  border: 1px solid var(--border);
  border-radius: var(--radius);
  color: var(--text);
  background: var(--bg-card);     /* allgemeiner Fallback */
}

.message.right { align-self: flex-end; background: var(--bg-right); }
.message.left  { align-self: flex-start; background: var(--bg-left);  }

/* Zeitstempel */
.msg-date {
  position: absolute;
  right: .5rem;
  bottom: .25rem;
  font-size: .75rem;
  color: rgba(0, 0, 0, .5);
}
.dark-theme .msg-date { color: rgba(255, 255, 255, .55); }

/* Eingabebereich am Seiten­ende - Updated */
.fixed-form {
  position: fixed;
  bottom: 0; left: 0; right: 0;
  padding: .5rem calc(50% - var(--width)/2);
  background: var(--bg-card);
  border-top: 1px solid var(--border);
  display: flex;
  gap: .5rem;
  max-width: 100%;
  z-index: 100; /* Ensure it stays on top of content */
  box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.05); /* Subtle shadow for visual separation */
}

.fixed-form input[type="text"] {
  flex: 1;
  padding: .5rem;
  border: 1px solid var(--border);
  border-radius: var(--radius);
  background: var(--bg-page);
  color: var(--text);
}

.fixed-form button {
  padding: .5rem 1rem;
  border: none;
  background: #0078ff;           /* Primärfarbe bleibt kräftig sichtbar */
  color: #fff;
  border-radius: var(--radius);
  cursor: pointer;
}

/* Make sure toolbar adjustments don't break our layout */
body.toolbar-open .fixed-form {
  padding-left: calc(var(--toolbar-width) + (50% - var(--width)/2));
  transition: padding-left 0.3s ease;
}

/* Dark theme adjustment for the box shadow */
.dark-theme .fixed-form {
  box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.2);
}

🎨 --- static\css\toolbar.css ---
/* -------------------------------------------------
   Toolbar‑Styles (Linke Sidebar und horizontales Panel)
   ------------------------------------------------- */

/* ---------- Globale Variablen für die Toolbars ---------- */
:root {
  /* Dimensionen der Toolbars */
  --left-toolbar-width: 250px;
  --navbar-height: 52px;         /* Exakt 52px wie gefordert */
  --horizontal-panel-height: 52px; /* Exakt gleiche Höhe wie Navbar */
  --input-form-height: 56px;     /* Höhe des Eingabebereichs */

  /* Spezielle Hintergründe für die Toolbars */
  --bg-toolbar-light: #f7f7f7;   /* etwas dunkler als weiß */
  --bg-toolbar-dark:  #262626;   /* etwas heller als #1e1e1e */
}

/* ---------- Layout‑Logik für die Toolbars ---------- */
/* Chat-Container Anpassungen bei offener linker Toolbar */
body.left-toolbar-open .chat-container {
  margin-left: var(--left-toolbar-width);
  transition: margin-left 0.3s ease;
}

/* Anpassung bei offenem horizontalen Panel */
body.horizontal-panel-open .chat-container {
  margin-top: var(--horizontal-panel-height);
  transition: margin-top 0.3s ease;
}

/* Grundlegende Toolbar-Button Styles */
.toolbar-btn {
  background: none;
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0.25rem;
  margin-right: 0.5rem;
}

.toolbar-btn img {
  width: 24px;
  height: 24px;
  display: block;
}

/* ---------- Horizontales Panel ---------- */
/* Grund­layout des horizontalen Panels */
#horizontal-panel {
  position: fixed;
  top: var(--navbar-height);
  left: 0;
  right: 0;
  height: var(--horizontal-panel-height);
  background: var(--bg-toolbar-light);
  border-bottom: 1px solid var(--border);
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
  z-index: 990;
  transition: transform 0.3s ease;
  transform: translateY(-100%); /* Versteckt oberhalb der Navbar */
}

/* Sichtbarmachen des horizontalen Panels */
#horizontal-panel.visible {
  transform: translateY(0);
}

/* ---------- Linke Toolbar ---------- */
/* Grund­layout der linken Sidebar - jetzt mit Berücksichtigung des Eingabebereichs */
#left-toolbar {
  position: fixed;
  top: var(--navbar-height);
  left: 0;
  bottom: var(--input-form-height); /* Stoppt oberhalb des Eingabebereichs */
  width: var(--left-toolbar-width);
  background: var(--bg-toolbar-light);
  border-right: 1px solid var(--border);
  box-shadow: 2px 0 6px rgba(0, 0, 0, 0.05);
  overflow-y: auto;
  z-index: 990;
  transition: transform 0.3s ease;
  transform: translateX(-100%);
}

/* Sichtbarmachen der linken Toolbar */
#left-toolbar.visible {
  transform: translateX(0);
}

/* ---------- Anpassungen für geöffnetes horizontales Panel ---------- */
body.horizontal-panel-open #left-toolbar {
  top: calc(var(--navbar-height) + var(--horizontal-panel-height));
}

/* ---------- Dunkelmodus-Überschreibungen ---------- */
.dark-theme #left-toolbar,
.dark-theme #horizontal-panel {
  background: var(--bg-toolbar-dark);
  border-color: var(--border);
}

/* ---------- Anpassungen für die fixed-form ---------- */
/* Eingabeformular am unteren Rand fixiert */
.fixed-form {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  height: var(--input-form-height);
  padding: .5rem calc(50% - var(--width)/2);
  background: var(--bg-card);
  border-top: 1px solid var(--border);
  display: flex;
  align-items: center;
  gap: .5rem;
  max-width: 100%;
  z-index: 1000; /* Höherer z-index als die Toolbar */
  box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.05);
}

/* Anpassung für geöffnete linke Toolbar */
body.left-toolbar-open .fixed-form {
  padding-left: calc(var(--left-toolbar-width) + (50% - var(--width)/2));
  transition: padding-left 0.3s ease;
}

/* Navbar Brand Bereich - für die Icons und Text */
.navbar-brand {
  display: flex;
  align-items: center;
}

/* Sicherstellen, dass die Navbar richtig dargestellt wird */
.navbar {
  height: var(--navbar-height);
  display: flex;
  align-items: center;
  position: relative;
  z-index: 1000;
}

📜 --- static\js\auth.js ---
// static/js/auth.js
document.addEventListener("DOMContentLoaded", () => {
  const openBtn   = document.getElementById("openDeleteModal");
  const modal     = document.getElementById("deleteModal");
  const cancelBtn = document.getElementById("cancelDelete");
  const form      = document.getElementById("deleteForm");
  const pw2 = form.password_confirm.value;

  // Script läuft nur auf Login‑/Register‑Seiten
  if (!openBtn || !modal) return;

  /* ---------- Modal öffnen ---------- */
  openBtn.addEventListener("click", (e) => {
    e.preventDefault();
    modal.classList.add("show");      // Overlay einblenden
  });

  /* ---------- Modal schließen ---------- */
  cancelBtn.addEventListener("click", () => {
    modal.classList.remove("show");   // Overlay ausblenden
    form.reset();
  });

  /* ---------- Account löschen ---------- */
  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    const u1 = form.username.value.trim();
    const u2 = form.username_confirm.value.trim();
    const pw = form.password.value;
    const pw2 = form.password_confirm.value;

    if (u1 !== u2) {
      alert("Benutzernamen stimmen nicht überein!");
      return;
    }

    if (pw !== pw2) {
      alert("Passwörter stimmen nicht überein!");
           return;
    }

    try {
      const res = await fetch(deleteUrl, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          username:        u1,
          password:        pw,
          password_confirm: pw2
        })
      });

      if (res.ok) {
        window.location.href = redirectUrl;   // zurück zum Login
      } else {
        alert(await res.text() || "Fehler beim Löschen.");
      }
    } catch (err) {
      console.error(err);
      alert("Netzwerkfehler.");
    }
  });
});

📜 --- static\js\chat.js ---
document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("chatForm");
    const input = form.querySelector("input[name='message']");
    const chat  = document.getElementById("chat");

    form.addEventListener("submit", e => {
      e.preventDefault();
      const text = input.value.trim();
      if (!text) return;

      // rechte Bubble erzeugen
      const bubble = document.createElement("div");
      bubble.className = "message right";
      bubble.innerHTML = `
        <span>${text}</span>
        <span class="msg-date">${new Date().toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'})}</span>
      `;
      chat.appendChild(bubble);

      input.value = "";
      bubble.scrollIntoView({behavior:"smooth"});
    });
  });

📜 --- static\js\theme.js ---
// static/js/theme.js
document.addEventListener("DOMContentLoaded", () => {
    const btn  = document.getElementById("themeToggle");
    const img  = btn.querySelector("img");
    const root = document.documentElement;

    const setIcon = (dark) => {
      img.src = dark ? btn.dataset.iconDark : btn.dataset.iconLight;
    };

    // gespeicherte Präferenz anwenden
    const darkInitial = localStorage.getItem("theme") === "dark";
    if (darkInitial) root.classList.add("dark-theme");
    setIcon(darkInitial);

    // Klick‑Handler
    btn.addEventListener("click", () => {
      const dark = root.classList.toggle("dark-theme");
      localStorage.setItem("theme", dark ? "dark" : "light");
      setIcon(dark);
    });
  });

📜 --- static\js\toolbar.js ---
// static/js/toolbar.js
document.addEventListener("DOMContentLoaded", () => {
  // Button-Elemente
  const horizontalPanelBtn = document.getElementById("horizontalPanelBtn");
  const leftToolbarBtn = document.getElementById("leftToolbarBtn");

  // Toolbar-Elemente
  const horizontalPanel = document.getElementById("horizontal-panel");
  const leftToolbar = document.getElementById("left-toolbar");

  // Body für Klassen
  const body = document.body;

  // Hilfsfunktion zum Umschalten eines Elements
  function toggleElement(element, btnEl, bodyClass) {
    element.classList.toggle("visible");
    const isVisible = element.classList.contains("visible");

    if (isVisible) {
      body.classList.add(bodyClass);
    } else {
      body.classList.remove(bodyClass);
    }
  }

  // Horizontales Panel umschalten
  horizontalPanelBtn.addEventListener("click", () => {
    toggleElement(horizontalPanel, horizontalPanelBtn, "horizontal-panel-open");
  });

  // Linke Toolbar umschalten
  leftToolbarBtn.addEventListener("click", () => {
    toggleElement(leftToolbar, leftToolbarBtn, "left-toolbar-open");
  });

  // Dark Mode Status für Icon-Wechsel
  const themeBtn = document.getElementById("themeToggle");
  if (themeBtn) {
    themeBtn.addEventListener("click", updateToolbarIcons);
  }

  // Initial Icons basierend auf Theme setzen
  updateToolbarIcons();

  // Funktion zum Aktualisieren der Toolbar-Icons basierend auf dem aktuellen Theme
  function updateToolbarIcons() {
    const isDarkMode = document.documentElement.classList.contains("dark-theme");

    // Horizontales Panel Button Icon aktualisieren
    if (horizontalPanelBtn) {
      const horizontalIcon = horizontalPanelBtn.querySelector("img");
      horizontalIcon.src = isDarkMode
        ? horizontalPanelBtn.dataset.iconDark
        : horizontalPanelBtn.dataset.iconLight;
    }

    // Linke Toolbar Button Icon aktualisieren
    if (leftToolbarBtn) {
      const leftIcon = leftToolbarBtn.querySelector("img");
      if (leftIcon) {
        leftIcon.src = isDarkMode
          ? leftToolbarBtn.dataset.iconDark
          : leftToolbarBtn.dataset.iconLight;
      }
    }
  }
});

🌐 --- templates\base.html ---
<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="utf-8">
  <title>{% block title %}Chat{% endblock %}</title>

  <!-- Gemeinsame Styles -->
  <link rel="stylesheet" href="{{ url_for('static', filename='css/base.css') }}">
  <link rel="stylesheet" href="{{ url_for('static', filename='css/chat.css') }}">
  <link rel="stylesheet" href="{{ url_for('static', filename='css/auth.css') }}">
  {% block extra_css %}{% endblock %}
</head>
<body>

  {# ---------- globale Flash‑Meldungen ---------- #}
  {% with messages = get_flashed_messages(with_categories=true) %}
    {% if messages %}
      <ul class="flash-list">
        {% for category, message in messages %}
          <li class="flash {{ category }}">{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
  {% endwith %}

  {# ---------- Seiteninhalt ---------- #}
  {% block content %}{% endblock %}

  {# ---------- Auth‑Skript nur für /login & /register ---------- #}
  {% if request.endpoint in ['login', 'register'] %}
    <script>
      // Flask‑URLs ans JS durchreichen (kein Redeclare mehr)
      const deleteUrl   = "{{ url_for('delete_account') }}";
      const redirectUrl = "{{ url_for('login') }}";
    </script>
    <script src="{{ url_for('static', filename='js/auth.js') }}"></script>
  {% endif %}

  {# ---------- Theme‑Switcher immer laden ---------- #}
  <script src="{{ url_for('static', filename='js/theme.js') }}"></script>

  {# ---------- toolbar ---------- #}
  <script src="{{ url_for('static', filename='js/toolbar.js') }}"></script>

  {% block extra_js %}{% endblock %}
</body>
</html>

🌐 --- templates\index.html ---
{% extends "base.html" %}

{% block title %}Chat Messenger{% endblock %}

{% block extra_css %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/toolbar.css') }}">
{% endblock %}

{% block content %}
  <!-- Navbar mit Chat-Titel und Icons -->
  <nav class="navbar">
    <div class="navbar-brand">
      <!-- Horizontales Panel Button (tool01) -->
      <button id="horizontalPanelBtn" class="toolbar-btn" aria-label="Horizontales Panel umschalten"
              data-icon-light="{{ url_for('static', filename='img/tool01.png') }}"
              data-icon-dark="{{ url_for('static', filename='img/tooldark01.png') }}">
        <img src="{{ url_for('static', filename='img/tool01.png') }}" width="24" height="24" alt="">
      </button>

      <!-- Linke Toolbar Button (tool02) -->
      <button id="leftToolbarBtn" class="toolbar-btn" aria-label="Linke Toolbar umschalten"
              data-icon-light="{{ url_for('static', filename='img/tool02.png') }}"
              data-icon-dark="{{ url_for('static', filename='img/tooldark02.png') }}">
        <img src="{{ url_for('static', filename='img/tool02.png') }}" width="24" height="24" alt="">
      </button>

      <!-- Chat Titel -->
      <span class="btn-brand">Chat Messenger</span>
    </div>

    <div class="navbar-actions">
      <!-- Theme‑Toggle -->
      <button id="themeToggle" class="theme-btn" aria-label="Design umschalten"
              data-icon-light="{{ url_for('static', filename='img/theme.png') }}"
              data-icon-dark="{{ url_for('static', filename='img/themedark.png') }}">
        <img src="{{ url_for('static', filename='img/theme.png') }}" width="24" height="24" alt="">
      </button>

      <!-- Logout -->
      <a href="{{ url_for('logout') }}" class="logout-btn">Abmelden</a>
    </div>
  </nav>

  <!-- Horizontales Panel (erscheint unter der Navbar) - jetzt leer -->
  <div id="horizontal-panel">
    <!-- Leer für zukünftige Inhalte -->
  </div>

  <!-- Linke Toolbar -->
  <div id="left-toolbar">
    <div class="toolbar-content">
      <h3 class="toolbar-title">Linke Toolbar</h3>
      <p>Platzhalter für zukünftige Funktionen. Diese Toolbar öffnet sich von links.</p>
    </div>
  </div>

  <!-- ---------- Chat‑Inhalt ---------- -->
  <main class="chat-container" id="chat">
    <div class="message right">
      <span>hello, i am ...</span>
      <span class="msg-date">10:00</span>
    </div>

    <div class="message left">
      <span>Sprech Deutsch …</span>
      <span class="msg-date">10:01</span>
    </div>
  </main>

  <form class="fixed-form" id="chatForm" autocomplete="off">
    <input type="text" name="message" placeholder="Gib deine Nachricht ein …" required>
    <button type="submit">Senden</button>
  </form>
{% endblock %}

{% block extra_js %}
<script src="{{ url_for('static', filename='js/chat.js') }}"></script>
{% endblock %}

🌐 --- templates\login.html ---
{% extends "base.html" %}
{% block content %}

<!-- ---------- Theme‑Toggle oben rechts ---------- -->
<button id="themeToggle"
        class="theme-btn theme-floating"
        aria-label="Design umschalten"
        data-icon-light="{{ url_for('static', filename='img/theme.png') }}"
        data-icon-dark="{{ url_for('static', filename='img/themedark.png') }}">
  <img src="{{ url_for('static', filename='img/theme.png') }}" width="24" height="24" alt="">
</button>

<div class="auth-wrapper">
  <div class="auth-card">
    <h2>Anmelden</h2>

    <form method="post" class="auth-form">
      <input name="username"  placeholder="Benutzername" required>
      <input type="password" name="password" placeholder="Passwort" required>
      <button type="submit">Einloggen</button>
    </form>

    <p class="auth-alt">
      Noch kein Konto? <a href="{{ url_for('register') }}">Registrieren</a>
    </p>
    <p class="auth-alt">
      Altes Konto löschen?
      <a href="#" id="openDeleteModal">Konto löschen</a>
    </p>

    {# ---------- Lösch‑Modal ---------- #}
    <div class="modal-overlay" id="deleteModal" hidden>
      <div class="modal-card">
        <h3>Konto wirklich löschen?</h3>
        <p>Bitte Benutzernamen <strong>zweimal</strong> eintippen und Passwort bestätigen.</p>

        <form id="deleteForm">
          <input name="username"         placeholder="Benutzername" required>
          <input name="username_confirm" placeholder="Benutzername (wiederholen)" required>
          <input type="password" name="password"          placeholder="Passwort" required>
          <input type="password" name="password_confirm"  placeholder="Passwort wiederholen" required>
          <div class="modal-actions">
            <button type="button" id="cancelDelete">Abbrechen</button>
            <button type="submit"  class="danger">Löschen</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>
{% endblock %}

🌐 --- templates\register.html ---
{% extends "base.html" %}
{% block content %}

<!-- ---------- Theme‑Toggle oben rechts ---------- -->
<button id="themeToggle"
        class="theme-btn theme-floating"
        aria-label="Design umschalten"
        data-icon-light="{{ url_for('static', filename='img/theme.png') }}"
        data-icon-dark="{{ url_for('static', filename='img/themedark.png') }}">
  <img src="{{ url_for('static', filename='img/theme.png') }}" width="24" height="24" alt="">
</button>

<div class="auth-wrapper">
  <div class="auth-card">
    <h2>Registrieren</h2>

    <form method="post" class="auth-form">
      <input name="username"          placeholder="Benutzername" required>
      <input type="email" name="email" placeholder="E‑Mail"       required>
      <input type="password" name="password"          placeholder="Passwort" required>
      <input type="password" name="password_confirm"  placeholder="Passwort wiederholen" required>
      <button type="submit">Account anlegen</button>
    </form>

    <p class="auth-alt">
      Schon registriert?
      <a href="{{ url_for('login') }}">Jetzt anmelden</a>
    </p>
  </div>
</div>
{% endblock %}

